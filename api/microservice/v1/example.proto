// Указываем используемую версию нотации protobuf
syntax = "proto3";

// Имя нашего пакета по аналогии с .go файлами
// В названии пакета дублируем путь до самого файла proto, исключая название родительской директории (api)
// и изменяя слэш (/) точкой (.), пример:
// microservice/v1 -> microservice.v1
package microservice.v1;

// Файл proto это всего лишь описательная нотация, некий чертеж на основе которого
// необходимо сформировать программный код.
// Этой строкой указывается путь до каталога где будут размещены сгенерированные **Golang** файлы.
// Обратите внимание, что путь начинается с название нашего пакета, того самого которое мы задали при выполнении
// команды go mod init github.com/gRPC_test/golang-grpc, далее идут названия самих каталогов
option go_package = "github.com/gRPC_test/golang-grpc/pkg/microservice/v1";

// Запрос
// Описываем структуру данных которые планируем получить от клиента.
// Для понимания что к чему относится важно добавлять окончание Request к названию структуры.
message ExampleRequest {
    int32 number = 1;
}

// Ответ
// Описываем структуру данных которые планируем отправить клиенту.
// Для понимания что к чему относится важно добавлять окончание Response к названию структуры.
message ExampleResponse {
    string result = 1;
}
